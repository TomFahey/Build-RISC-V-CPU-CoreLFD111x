// Generated by SandPiper(TM) 1.11-2021/01/28-beta from Redwood EDA.
// (Installed here: /usr/local/mono/sandpiper/distro.)
// Redwood EDA does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


`include "sandpiper_gen.vh"





//
// Signals declared top-level.
//

// For $and1.
logic L0_and1_a0;

// For $and2.
logic L0_and2_a0;

// For $carry_in.
logic L0_carry_in_a0;

// For $carry_out.
logic L0_carry_out_a0;

// For $in1.
logic L0_in1_a0;

// For $in2.
logic L0_in2_a0;

// For $out.
logic L0_out_a0;

// For $r_carry_in.
logic [31:0] L0_r_carry_in_n1,
             L0_r_carry_in_a0;

// For $r_in1.
logic [31:0] L0_r_in1_n1,
             L0_r_in1_a0;

// For $r_in2.
logic [31:0] L0_r_in2_n1,
             L0_r_in2_a0;

// For $reset.
logic L0_reset_a0;

// For $xor.
logic L0_xor_a0;



generate

   // For signal $carry_in, which had no assignment.
   // Assign to a random value.
   // verilator lint_save
   // verilator lint_off WIDTH
   assign L0_carry_in_a0 = L0_r_carry_in_a0;
   // verilator lint_restore

   // For signal $in1, which had no assignment.
   // Assign to a random value.
   // verilator lint_save
   // verilator lint_off WIDTH
   assign L0_in1_a0 = L0_r_in1_a0;
   // verilator lint_restore

   // For signal $in2, which had no assignment.
   // Assign to a random value.
   // verilator lint_save
   // verilator lint_off WIDTH
   assign L0_in2_a0 = L0_r_in2_a0;
   // verilator lint_restore

   // For random value for missing assignment.
   assign L0_r_carry_in_n1[31:0] = $random() ^ {31'b0, clk};
   always_ff @(posedge clk) L0_r_carry_in_a0[31:0] <= L0_r_carry_in_n1[31:0];

   // For random value for missing assignment.
   assign L0_r_in1_n1[31:0] = $random() ^ {31'b0, clk};
   always_ff @(posedge clk) L0_r_in1_a0[31:0] <= L0_r_in1_n1[31:0];

   // For random value for missing assignment.
   assign L0_r_in2_n1[31:0] = $random() ^ {31'b0, clk};
   always_ff @(posedge clk) L0_r_in2_a0[31:0] <= L0_r_in2_n1[31:0];



endgenerate




//
// Debug Signals
//

generate

   if (1) begin : DEBUG_SIGS

      logic  \@0$and1 ;
      assign \@0$and1 = L0_and1_a0;
      logic  \@0$and2 ;
      assign \@0$and2 = L0_and2_a0;
      logic  \@0$carry_in ;
      assign \@0$carry_in = L0_carry_in_a0;
      logic  \@0$carry_out ;
      assign \@0$carry_out = L0_carry_out_a0;
      logic  \@0$in1 ;
      assign \@0$in1 = L0_in1_a0;
      logic  \@0$in2 ;
      assign \@0$in2 = L0_in2_a0;
      logic  \@0$out ;
      assign \@0$out = L0_out_a0;
      logic  \@0$reset ;
      assign \@0$reset = L0_reset_a0;
      logic  \@0$xor ;
      assign \@0$xor = L0_xor_a0;


   end

endgenerate




generate   // This is awkward, but we need to go into 'generate' context in the line that `includes the declarations file.
