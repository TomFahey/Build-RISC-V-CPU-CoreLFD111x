`line 2 "top.tlv" 0 //_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.11-2021/01/28-beta
`include "sp_default.vh" //_\SV

   // =========================================
   // Welcome!  Try the tutorials via the menu.
   // =========================================

   // Default Makerchip TL-Verilog Code Template
   
   // Macro providing required top-level module definition, random
   // stimulus support, and Verilator config.
   module top(input wire clk, input wire reset, input wire [31:0] cyc_cnt, output wire passed, output wire failed);    /* verilator lint_save */ /* verilator lint_off UNOPTFLAT */  bit [256:0] RW_rand_raw; bit [256+63:0] RW_rand_vect; pseudo_rand #(.WIDTH(257)) pseudo_rand (clk, reset, RW_rand_raw[256:0]); assign RW_rand_vect[256+63:0] = {RW_rand_raw[62:0], RW_rand_raw};  /* verilator lint_restore */  /* verilator lint_off WIDTH */ /* verilator lint_off UNOPTFLAT */   // (Expanded in Nav-TLV pane.)
`include "top_gen.sv" //_\TLV
   assign L0_reset_a0 = reset;
   
   assign L0_sum_a0[31:0] = L0_val1_a0[31:0] + L0_val2_a0[31:0];
   assign L0_diff_a0[31:0] = L0_val1_a0[31:0] - L0_val2_a0[31:0];
   assign L0_prod_a0[31:0] = L0_val1_a0[31:0] * L0_val2_a0[31:0];
   assign L0_quot_a0[31:0] = L0_val1_a0[31:0] / L0_val2_a0[31:0];
   assign L0_out_a0[31:0] =
      (L0_op_a0[1:0] == 3)
         ? L0_quot_a0[31:0] :
      (L0_op_a0[1:0] == 2)
         ? L0_prod_a0[31:0] :
      (L0_op_a0[1:0] == 1) 
         ? L0_diff_a0[31:0] :
      // default
           L0_sum_a0[31:0];
           

   // Assert these to end simulation (before Makerchip cycle limit).
   assign passed = cyc_cnt > 40;
   assign failed = 1'b0; endgenerate
//_\SV
   endmodule
