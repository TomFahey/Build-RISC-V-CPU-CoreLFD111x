// Generated by SandPiper(TM) 1.11-2021/01/28-beta from Redwood EDA.
// (Installed here: /usr/local/mono/sandpiper/distro.)
// Redwood EDA does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


`include "sandpiper_gen.vh"





//
// Signals declared top-level.
//

// For $diff.
logic [31:0] L0_diff_a0;

// For $op.
logic [1:0] L0_op_a0;

// For $out.
logic [31:0] L0_out_a0;

// For $prod.
logic [31:0] L0_prod_a0;

// For $quot.
logic [31:0] L0_quot_a0;

// For $r_op.
logic [31:0] L0_r_op_n1,
             L0_r_op_a0;

// For $r_val1.
logic [31:0] L0_r_val1_n1,
             L0_r_val1_a0;

// For $r_val2.
logic [31:0] L0_r_val2_n1,
             L0_r_val2_a0;

// For $reset.
logic L0_reset_a0;

// For $sum.
logic [31:0] L0_sum_a0;

// For $val1.
logic [31:0] L0_val1_a0;

// For $val2.
logic [31:0] L0_val2_a0;



generate

   // For signal $op, which had no assignment.
   // Assign to a random value.
   // verilator lint_save
   // verilator lint_off WIDTH
   assign L0_op_a0[1:0] = L0_r_op_a0;
   // verilator lint_restore

   // For random value for missing assignment.
   assign L0_r_op_n1[31:0] = $random() ^ {31'b0, clk};
   always_ff @(posedge clk) L0_r_op_a0[31:0] <= L0_r_op_n1[31:0];

   // For random value for missing assignment.
   assign L0_r_val1_n1[31:0] = $random() ^ {31'b0, clk};
   always_ff @(posedge clk) L0_r_val1_a0[31:0] <= L0_r_val1_n1[31:0];

   // For random value for missing assignment.
   assign L0_r_val2_n1[31:0] = $random() ^ {31'b0, clk};
   always_ff @(posedge clk) L0_r_val2_a0[31:0] <= L0_r_val2_n1[31:0];

   // For signal $val1, which had no assignment.
   // Assign to a random value.
   // verilator lint_save
   // verilator lint_off WIDTH
   assign L0_val1_a0[31:0] = L0_r_val1_a0;
   // verilator lint_restore

   // For signal $val2, which had no assignment.
   // Assign to a random value.
   // verilator lint_save
   // verilator lint_off WIDTH
   assign L0_val2_a0[31:0] = L0_r_val2_a0;
   // verilator lint_restore



endgenerate




//
// Debug Signals
//

generate

   if (1) begin : DEBUG_SIGS

      logic [31:0] \@0$diff ;
      assign \@0$diff = L0_diff_a0;
      logic [1:0] \@0$op ;
      assign \@0$op = L0_op_a0;
      logic [31:0] \@0$out ;
      assign \@0$out = L0_out_a0;
      logic [31:0] \@0$prod ;
      assign \@0$prod = L0_prod_a0;
      logic [31:0] \@0$quot ;
      assign \@0$quot = L0_quot_a0;
      logic  \@0$reset ;
      assign \@0$reset = L0_reset_a0;
      logic [31:0] \@0$sum ;
      assign \@0$sum = L0_sum_a0;
      logic [31:0] \@0$val1 ;
      assign \@0$val1 = L0_val1_a0;
      logic [31:0] \@0$val2 ;
      assign \@0$val2 = L0_val2_a0;


   end

endgenerate




generate   // This is awkward, but we need to go into 'generate' context in the line that `includes the declarations file.